/**
 * @fileoverview gRPC-Web generated client stub for com.codewiz.appointment
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: proto/appointment.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_appointment_pb from '../proto/appointment_pb'; // proto import: "proto/appointment.proto"


export class AppointmentServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorBookAppointment = new grpcWeb.MethodDescriptor(
    '/com.codewiz.appointment.AppointmentService/BookAppointment',
    grpcWeb.MethodType.UNARY,
    proto_appointment_pb.BookAppointmentRequest,
    proto_appointment_pb.BookAppointmentResponse,
    (request: proto_appointment_pb.BookAppointmentRequest) => {
      return request.serializeBinary();
    },
    proto_appointment_pb.BookAppointmentResponse.deserializeBinary
  );

  bookAppointment(
    request: proto_appointment_pb.BookAppointmentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_appointment_pb.BookAppointmentResponse>;

  bookAppointment(
    request: proto_appointment_pb.BookAppointmentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_appointment_pb.BookAppointmentResponse) => void): grpcWeb.ClientReadableStream<proto_appointment_pb.BookAppointmentResponse>;

  bookAppointment(
    request: proto_appointment_pb.BookAppointmentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_appointment_pb.BookAppointmentResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/com.codewiz.appointment.AppointmentService/BookAppointment',
        request,
        metadata || {},
        this.methodDescriptorBookAppointment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/com.codewiz.appointment.AppointmentService/BookAppointment',
    request,
    metadata || {},
    this.methodDescriptorBookAppointment);
  }

  methodDescriptorGetAppointmentAvailability = new grpcWeb.MethodDescriptor(
    '/com.codewiz.appointment.AppointmentService/GetAppointmentAvailability',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_appointment_pb.AppointmentAvailabilityRequest,
    proto_appointment_pb.AppointmentAvailabilityResponse,
    (request: proto_appointment_pb.AppointmentAvailabilityRequest) => {
      return request.serializeBinary();
    },
    proto_appointment_pb.AppointmentAvailabilityResponse.deserializeBinary
  );

  getAppointmentAvailability(
    request: proto_appointment_pb.AppointmentAvailabilityRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_appointment_pb.AppointmentAvailabilityResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/com.codewiz.appointment.AppointmentService/GetAppointmentAvailability',
      request,
      metadata || {},
      this.methodDescriptorGetAppointmentAvailability);
  }

}

